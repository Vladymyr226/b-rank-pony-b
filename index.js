import TelegramBot from 'node-telegram-bot-api'
import Calendar from 'telegram-inline-calendar'
import config from 'config'
import { Configuration, OpenAIApi } from 'openai'
import fs from 'fs'

const TOKEN = '7125472368:AAG-I3gg-ctP86N5FGBEovFDybIsB_wJOIk'

const configuration = new Configuration({
  apiKey: config.get('OPENAI_KEY'),
})
const openai = new OpenAIApi(configuration)

const bot = new TelegramBot(TOKEN, {
  polling: true,
})

const calendar = new Calendar(bot, {
  date_format: 'DD-MM-YYYY –æ HH:mm',
  language: 'en',
  start_week_day: 1,
  time_selector_mod: true,
  time_range: '08:00-20:00',
  time_step: '40m',
  custom_start_msg: '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –¥–∞—Ç—É —Ç–∞ —á–∞—Å üôÇ',
})

const options = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–î—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏ –∑–∞–∫–ª–∞–¥—É', callback_data: '1' }],
      [{ text: '–ó–∞–º–æ–≤–∏—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫', callback_data: '2', request_contact: true }],
      [{ text: '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –æ–Ω–ª–∞–π–Ω –¥–æ —Ñ–∞—Ö—ñ–≤—Ü—è –∑–∞–∫–ª–∞–¥—É', callback_data: '3' }],
      [
        {
          text: '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–∏–ª—å–Ω—É –∑–∞—á—ñ—Å–∫—É –∑–∞ –º–æ—ó–º —Ñ–æ—Ç–æ',
          callback_data: '4',
        },
      ],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
}

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', options)
})
bot.onText('–ß–∏–Ω–∞', (msg) => {
  bot.sendMessage(msg.chat.id, '–°–∞—É–Ω–¥—Ç—Ä–µ–∫, —Å–∞–Ω—á—ñ–∑–µ—Å, —Å—é–¥–∞-–∞')
})

bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id
  const data = query.data

  if (data === '1') {
    bot.sendMessage(
      chatId,
      `
1. "–ë–ª–∏—Å–∫—É—á–∏–π –ë–ª–∏—Å–∫" - –º–∞–Ω—ñ–∫—é—Ä + –ø–æ–∫—Ä–∏—Ç—Ç—è –≥–µ–ª—å-–ª–∞–∫–æ–º - *350 –≥—Ä–Ω*

2. "–î–∏–≤–æ–≤–∏–∂–Ω–∏–π –í–∏–≥–ª—è–¥" - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –º–∞–∫—ñ—è–∂ –Ω–∞ –≤–µ—á—ñ—Ä–∫—É - *500 –≥—Ä–Ω*

3. "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –í–æ–ª–æ—Å—Å—è" - –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≥–ª–∏–±–æ–∫–æ–≥–æ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è –≤–æ–ª–æ—Å—Å—è - *600 –≥—Ä–Ω*

4. "–†–µ–ª–∞–∫—Å–∞—Ü—ñ–π–Ω–∞ –†–æ–∑–∫—ñ—à" - –º–∞—Å–∞–∂ –æ–±–ª–∏—á—á—è —Ç–∞ —à–∏—ó - *400 –≥—Ä–Ω*

5. "–†–æ–∑–∫—ñ—à–Ω—ñ –†–µ—Å–Ω–∏—Ü—ñ" - –Ω–∞—Ä–æ—â—É–≤–∞–Ω–Ω—è –≤—ñ–π (–∫–ª–∞—Å–∏—á–Ω–µ) - *700 –≥—Ä–Ω*

6. "–ß–∞—Ä—ñ–≤–Ω–∞ –ó–º—ñ–Ω–∞" - —Å—Ç—Ä–∏–∂–∫–∞ + —É–∫–ª–∞–¥–∫–∞ - *800 –≥—Ä–Ω*
`,
      {
        parse_mode: 'Markdown',
      }
    )
  }

  if (data === '2') {
    bot.sendMessage(
      chatId,
      '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"',
      {
        reply_markup: {
          keyboard: [[{ text: '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    )
  }

  if (data === '3') {
    calendar.startNavCalendar(query.message)
  }

  if (query.message.message_id == calendar.chats.get(query.message.chat.id)) {
    res = calendar.clickButtonCalendar(query)

    if (res !== -1) {
      bot.sendMessage(query.message.chat.id, '‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–¥—ñ–π—Å–Ω–∏–ª–∏ –∑–∞–ø–∏—Å –¥–æ —Ñ–∞—Ö—ñ–≤—Ü—è: ' + res)
    }
  }

  if (data === '4') {
    bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∏–ª—å–Ω–æ—ó –∑–∞—á—ñ—Å–∫–∏.')
  }
})

// bot.on('callback_query', (query) => {})

bot.on('polling_error', (error) => {
  console.log(error)
})

bot.on('contact', (msg) => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, `–î–æ–±—Ä–µ, –æ—á—ñ–∫—É–π—Ç–µ, –º–∞–π—Å—Ç–µ—Ä –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!`)
  bot.sendMessage(msg.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', options)
})

bot.on('photo', async (msg) => {
  const chatId = msg.chat.id
  const photoId = msg.photo[0].file_id

  const photoInfo = await bot.getFile(photoId)
  const photoUrl = `https://api.telegram.org/file/bot${TOKEN}/${photoInfo.file_path}`

  const prompt = 'show more haircut options for this person'

  // model: 'dall-e-2',
  // image: fs.createReadStream(photoUrl),
  // prompt,
  // n: 1,
  // size: '1024x1024',

  try {
    const response = await openai.createImageEdit(
      fs.createReadStream('./img/Volodya.jpeg'),
      fs.createReadStream('./img/Volodya.jpeg'),
      // prompt,
      'show more haircut options for this person',

      // fs.createReadStream(photoUrl),

      // fs.createReadStream('mask.png'),

      1,
      '1024x1024'
    )
    image_url = response.data[0].url

    console.log(image_url)

    // await bot.sendPhoto(chatId, image_url)

    bot.sendMessage(msg.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', options)
  } catch (error) {
    console.error('Error:', error)
    bot.sendMessage(chatId, '–ü—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
  }
})

// const prompt = 'unicorn with banana'
// const size = '1024x1024'
// const number = 1

// const response = await openai.createImage({
//   prompt,
//   size,
//   n: Number(number),
// })
