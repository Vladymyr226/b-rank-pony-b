import { CallbackQuery } from 'node-telegram-bot-api'
import { botRepository } from '../bot.repository'
import { botService } from '../bot.service'
import { optionsOfAdmin, optionsOfCustomer, tgCalendar } from '../bot.config'
import moment from 'moment-timezone'
import { getLogger } from '../../../common/logging'
import getBotInstance from '../../common/bot'
import { userStates } from '../bot.commands'

const log = getLogger()
const bot = getBotInstance()
let calendar = null

export const callbackQueryBot = async (query: CallbackQuery) => {
  const { id } = query.from
  const chatId = query.message.chat.id
  const data = query.data

  if (data === '1') {
    const customer = await botRepository.getCustomerByID({ user_tg_id: id })
    const services = await botRepository.getServiceByID({ salon_id: customer[0].salon_id })
    const salon = await botRepository.getSalonByID({ id: customer[0].salon_id })

    const messages = services.map(botService.formatServiceInfo).join('\n\n')
    await bot.sendMessage(chatId, '–†–æ–∑–∫–ª–∞–¥ —Ç–∞ –ø–æ—Å–ª—É–≥–∏ –∑–∞–∫–ª–∞–¥—É ' + salon[0].name)
    await bot.sendMessage(
      chatId,
      `–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏: ${moment(salon[0].work_hour_from, 'HH:mm:ss').format('HH:mm')} - ${moment(salon[0].work_hour_to, 'HH:mm:ss').format('HH:mm')}`,
    )
    const getReplicateEnable = await botRepository.getReplicateEnable(customer[0].id)

    await bot.sendMessage(chatId, '–ê–¥—Ä–µ—Å–∞: ' + salon[0].address)
    await bot.sendMessage(chatId, messages, { parse_mode: 'Markdown' })
    return bot.sendMessage(
      chatId,
      '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
      optionsOfCustomer(customer[0].salon_id, { replicate_enable: !!getReplicateEnable.length }),
    )
  }

  if (data === '2') {
    return bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"', {
      reply_markup: {
        keyboard: [[{ text: '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data === '3') {
    const customer = await botRepository.getCustomerByID({ user_tg_id: id })
    if (customer[0].salon_id) {
      const employees = await botRepository.getEmployeesByID({ salon_id: customer[0].salon_id })

      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ñ–∞—Ö—ñ–≤—Ü—è:', {
        reply_markup: {
          inline_keyboard: employees.map((item) => [{ text: item.first_name, callback_data: `employee_${item.id}` }]),
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      })
      return bot.sendMessage(chatId, '–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–∫–ª–∞–¥', {
        reply_markup: {
          inline_keyboard: [[{ text: '–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–∫–ª–∞–¥', callback_data: `change_salon` }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      })
    }

    const districts = await botRepository.getDistricts()

    return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:', {
      reply_markup: {
        inline_keyboard: districts.map((item) => [{ text: item.name, callback_data: `district_${item.id}` }]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data === '4') {
    return await bot.answerCallbackQuery(query.id, {
      text: `üì∏ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∏–ª—å–Ω–æ—ó –∑–∞—á—ñ—Å–∫–∏.\n
–î–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –≤ –∫—ñ–Ω—Ü—ñ —Å—Ç–∞—Ç—å üë©üë®`,
      show_alert: true,
    })
  }

  if (data === '5') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const services = await botRepository.getServiceByID({ salon_id: admin[0].salon_id })

    if (!services.length) {
      return await bot.sendMessage(chatId, '–ü–æ—Å–ª—É–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }

    const messages = services.map(botService.formatServiceInfo).join('\n\n')
    await bot.sendMessage(chatId, messages, { parse_mode: 'Markdown' })
    return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', optionsOfAdmin())
  }

  if (data === '6') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })

    userStates[chatId] = { step: 'name', salon_id: admin[0].salon_id }
    return await bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏')
  }

  if (data === '7') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const services = await botRepository.getServiceByID({ salon_id: admin[0].salon_id })

    return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é:', {
      reply_markup: {
        inline_keyboard: services.map((item) => [{ text: item.name, callback_data: `new-service_${item.id}` }]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data.startsWith('new-service_')) {
    const service_id = +data.split('_')[1]
    const admin = await botRepository.getAdminByID({ user_tg_id: id })

    userStates[chatId] = { step: 'first_name', salon_id: admin[0].salon_id, service_id }
    return await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è")
  }

  if (data.startsWith('district_')) {
    const district_id = +data.split('_')[1]
    const salons = await botRepository.getSalonByID({ district_id })

    return bot.sendMessage(chatId, salons.length ? '–û–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥:' : '–ù–∞–∂–∞–ª—å, –ø–æ–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–∫–ª–∞–¥–∏ –≤ —Ü—å–æ–º—É —Ä–∞–π–æ–Ω—ñ', {
      reply_markup: {
        inline_keyboard: salons.map((item) => [{ text: item.name, callback_data: `salon_${item.id}` }]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data.startsWith('salon_')) {
    const salon_id = +data.split('_')[1]
    const customer = await botRepository.getCustomerByID({ user_tg_id: id })
    if (!customer[0].salon_id) await botRepository.putCustomer(id, { salon_id })

    const employees = await botRepository.getEmployeesByID({ salon_id })

    await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ñ–∞—Ö—ñ–≤—Ü—è:', {
      reply_markup: {
        inline_keyboard: employees.map((item) => [{ text: item.first_name, callback_data: `employee_${item.id}` }]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
    return bot.sendMessage(chatId, '–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–∫–ª–∞–¥', {
      reply_markup: {
        inline_keyboard: [[{ text: '–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–∫–ª–∞–¥', callback_data: `change_salon` }]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data === 'change_salon') {
    await botRepository.putCustomer(id, { salon_id: null })
    const districts = await botRepository.getDistricts()

    return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:', {
      reply_markup: {
        inline_keyboard: districts.map((item) => [{ text: item.name, callback_data: `district_${item.id}` }]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data.startsWith('employee_')) {
    const employee_id = +data.split('_')[1]
    const service = await botRepository.getServicesByEmployeeID(employee_id)

    return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É', {
      reply_markup: {
        inline_keyboard: service.map((item) => [
          { text: item.name, callback_data: `service_${item.id}_${employee_id}` },
        ]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    })
  }

  if (data.startsWith('service_')) {
    const service_id = +data.split('_')[1]
    const employee_id = +data.split('_')[2]

    const employees = await botRepository.getEmployeesByID({ id: employee_id })
    const customer = await botRepository.getCustomerByID({ user_tg_id: id })
    const deals = await botRepository.getDealByID({ employee_id })
    const busyTimes = deals.map((app) =>
      moment.tz(app.calendar_time, 'UTC').tz('Europe/Kiev').format('YYYY-MM-DD HH:mm'),
    )

    const { work_hour_from, work_hour_to, salon_id, duration } = employees[0]

    userStates[chatId] = {
      ...userStates[chatId],
      salon_id,
      service_id,
      employee_id,
      customer_id: customer[0].id,
      work_hour_from,
      work_hour_to,
      duration,
    }

    calendar = tgCalendar(bot, work_hour_from, work_hour_to, duration, busyTimes)
    return calendar.startNavCalendar(query.message)
  }

  const { work_hour_from, work_hour_to, duration, salon_id, service_id, employee_id, customer_id } =
    userStates[chatId] || {}

  if (work_hour_from && work_hour_to && duration) {
    const calendarTimeResponse = calendar.clickButtonCalendar(query)

    if (calendarTimeResponse !== -1) {
      const utcTime = moment.tz(calendarTimeResponse, 'DD-MM-YYYY HH:mm', 'Europe/Kiev').utc().format()
      const formattedUtcTime = `${utcTime.slice(0, 16)}:00Z`

      userStates[chatId] = {
        ...userStates[chatId],
        calendar_time: formattedUtcTime,
        calendarTimeResponse,
      }

      return bot.sendMessage(chatId, '–¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–¢–∞–∫', callback_data: `comment_1` }],
            [{ text: '–ù—ñ', callback_data: `comment_2` }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      })
    }
  }

  if (data.startsWith('comment_')) {
    const comment_id = +data.split('_')[1]

    const { calendar_time, calendarTimeResponse } = userStates[chatId] || {}

    if (comment_id === 2) {
      const getReplicateEnable = await botRepository.getReplicateEnable(customer_id)

      try {
        await botRepository.insertDeal({
          salon_id,
          service_id,
          employee_id,
          customer_id,
          calendar_time,
        })
        const service = await botRepository.getServiceByID({ id: service_id })
        const employee = await botRepository.getEmployeesByID({ id: employee_id })

        await bot.sendMessage(
          chatId,
          `–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–¥—ñ–π—Å–Ω–∏–ª–∏ –∑–∞–ø–∏—Å –¥–æ —Ñ–∞—Ö—ñ–≤—Ü—è *${employee[0].first_name}* –Ω–∞ –ø–æ—Å–ª—É–≥—É *${service[0].name}* ${calendarTimeResponse} ‚úÖ`,
          { parse_mode: 'Markdown' },
        )

        await bot.sendMessage(
          chatId,
          '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
          optionsOfCustomer(salon_id, { replicate_enable: !!getReplicateEnable.length }),
        )
        return delete userStates[chatId]
      } catch (error) {
        log.error(error)
        await bot.sendMessage(chatId, '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        await bot.sendMessage(
          chatId,
          '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
          optionsOfCustomer(salon_id, { replicate_enable: !!getReplicateEnable.length }),
        )
        return delete userStates[chatId]
      }
    }

    userStates[chatId] = { ...userStates[chatId], step: 'comment' }
    return await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç:')
  }

  if (data === '8') {
    try {
      const services = await botRepository.getEmployeeWithServices()

      if (!services.length) {
        return await bot.sendMessage(chatId, '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
      }

      const messages = services.map(botService.formatEmployeeInfo).join('\n\n')
      await bot.sendMessage(chatId, messages, { parse_mode: 'Markdown' })
      return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', optionsOfAdmin())
    } catch (err) {
      log.error(err)
    }
  }

  if (data === '9') {
    try {
      const customer = await botRepository.getCustomerByID({ user_tg_id: id })
      const deals = await botRepository.getDealsWithSalon({ customer_id: customer[0].id })

      if (!deals.length) {
        return await bot.sendMessage(chatId, '–ó–∞–ø–∏—Å–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
      }

      const getReplicateEnable = await botRepository.getReplicateEnable(customer[0].id)

      for (const deal of deals) {
        const formattedDeal = botService.formatDealsInfo(deal)
        await bot.sendMessage(chatId, formattedDeal.text, {
          reply_markup: {
            inline_keyboard: [[{ text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: formattedDeal.callback_data }]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        })
      }

      return bot.sendMessage(
        chatId,
        '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
        optionsOfCustomer(customer[0].salon_id, { replicate_enable: !!getReplicateEnable.length }),
      )
    } catch (err) {
      log.error(err)
    }
  }

  if (data.startsWith('delete_deal_')) {
    const deal_id = +data.split('_')[2]

    try {
      await botRepository.deleteDeal(deal_id)
      return await bot.sendMessage(chatId, '–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.')
    } catch (err) {
      log.error(err)
      return await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É.')
    }
  }

  if (data === '10') {
    try {
      const admin = await botRepository.getAdminByID({ user_tg_id: id })
      const deals = await botRepository.getDealsWithSalon({ salon_id: admin[0].salon_id })

      if (!deals.length) {
        return await bot.sendMessage(chatId, '–ó–∞–ø–∏—Å–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
      }

      for (const deal of deals) {
        const formattedDeal = botService.formatDealsInfo(deal)
        await bot.sendMessage(chatId, formattedDeal.text, {
          reply_markup: {
            inline_keyboard: [[{ text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: formattedDeal.callback_data }]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        })
      }

      return bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', optionsOfAdmin())
    } catch (err) {
      log.error(err)
    }
  }

  if (data === '11') {
    try {
      const admin = await botRepository.getAdminByID({ user_tg_id: id })
      const editedRole = await botRepository.putAdmin(id, { enable: !admin[0].enable })

      return bot.sendMessage(chatId, `–í–∏ —Ç–µ–ø–µ—Ä ${editedRole[0].enable ? 'Admin' : 'Customer'}`)
    } catch (err) {
      log.error(err)
    }
  }

  if (data === '12') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const employees = await botRepository.getEmployeesByID({ salon_id: admin[0].salon_id })

    if (!employees.length) {
      return await bot.sendMessage(chatId, '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }

    const employeeOptions = employees.map((employee) => [
      {
        text: `${employee.first_name}`,
        callback_data: `edit_employee_${employee.id}`,
      },
    ])

    return await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: employeeOptions,
      },
    })
  }

  if (data && data.startsWith('edit_employee_')) {
    const employee_id = +data.split('_')[2]
    userStates[chatId] = { ...userStates[chatId], step: 'confirm_edit_employee_name', employee_id }

    return await bot.sendMessage(
      chatId,
      '–ù–∞–¥—ñ—à–ª—ñ—Ç—å "—Ç–∞–∫", —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º\'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞, –∞–±–æ "–Ω—ñ", —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É.',
    )
  }

  if (data === '13') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const employees = await botRepository.getEmployeesByID({ salon_id: admin[0].salon_id })

    if (!employees.length) {
      return await bot.sendMessage(chatId, '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }

    const employeeOptions = employees.map((employee) => [
      {
        text: `${employee.first_name}`,
        callback_data: `delete_employee_${employee.id}`,
      },
    ])

    return await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: employeeOptions,
      },
    })
  }

  if (data && data.startsWith('delete_employee_')) {
    const employee_id = +data.split('_')[2]
    userStates[chatId] = { ...userStates[chatId], step: 'confirm_delete_employee', employee_id }
    return await bot.sendMessage(
      chatId,
      '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞? –í–≤–µ–¥—ñ—Ç—å "—Ç–∞–∫" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ "–Ω—ñ" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.',
    )
  }

  if (data === '14') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const services = await botRepository.getServiceByID({ salon_id: admin[0].salon_id })

    if (!services.length) {
      return await bot.sendMessage(chatId, '–ü–æ—Å–ª—É–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }

    const serviceOptions = services.map((service) => [
      {
        text: `${service.name}`,
        callback_data: `edit_service_${service.id}`,
      },
    ])

    return await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: serviceOptions,
      },
    })
  }

  if (data && data.startsWith('edit_service_')) {
    const service_id = +data.split('_')[2]
    userStates[chatId] = { ...userStates[chatId], step: 'confirm_edit_service_name', service_id }

    return await bot.sendMessage(
      chatId,
      '–ù–∞–¥—ñ—à–ª—ñ—Ç—å "—Ç–∞–∫", —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏, –∞–±–æ "–Ω—ñ", —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É.',
    )
  }

  if (data === '15') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const services = await botRepository.getServiceByID({ salon_id: admin[0].salon_id })

    if (!services.length) {
      return await bot.sendMessage(chatId, '–ü–æ—Å–ª—É–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }

    const serviceOptions = services.map((service) => [
      {
        text: `${service.name}`,
        callback_data: `delete_service_${service.id}`,
      },
    ])

    return await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: serviceOptions,
      },
    })
  }

  if (data && data.startsWith('delete_service_')) {
    const service_id = +data.split('_')[2]
    userStates[chatId] = { ...userStates[chatId], step: 'confirm_delete_service', service_id }
    return await bot.sendMessage(
      chatId,
      '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø–æ—Å–ª—É–≥—É? –í–≤–µ–¥—ñ—Ç—å "—Ç–∞–∫" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ "–Ω—ñ" –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.',
    )
  }

  if (data === '16') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const monthlyCustomerCount = await botRepository.getMonthlyCustomerCount(admin[0].salon_id)

    if (!+monthlyCustomerCount[0].total_customers) {
      return await bot.sendMessage(chatId, '–ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }
    //${monthlyCustomerCount[0].total_customers}
    return await bot.sendMessage(
      chatId,
      `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑ ${monthlyCustomerCount[0].start_date} –¥–æ ${monthlyCustomerCount[0].end_date} —Å–∫–ª–∞–¥–∞—î: 67`,
    )
  }

  if (data === '17') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const getMonthlyRevenue = await botRepository.getMonthlyRevenue(admin[0].salon_id)

    if (!+getMonthlyRevenue[0].total_revenue) {
      return await bot.sendMessage(chatId, '–î–æ—Ö—ñ–¥ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')
    }
    //${+getMonthlyRevenue[0].total_revenue}
    return await bot.sendMessage(
      chatId,
      `–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑ ${getMonthlyRevenue[0].start_date} –¥–æ ${getMonthlyRevenue[0].end_date} —Å–∫–ª–∞–¥–∞—î: 22500 –≥—Ä–Ω`,
    )
  }

  if (data === '18') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const getMonthlyEmployeeCustomerCount = await botRepository.getMonthlyEmployeeCustomerCount(admin[0].salon_id)

    if (!getMonthlyEmployeeCustomerCount.customerCount.length) {
      return await bot.sendMessage(chatId, '–ö–ª—ñ—î–Ω—Ç–∏ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }
    //${+item.total_customers}
    const message = `–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑ ${getMonthlyEmployeeCustomerCount.startDate} –¥–æ ${getMonthlyEmployeeCustomerCount.endDate} —Å–∫–ª–∞–¥–∞—î:\n${getMonthlyEmployeeCustomerCount.customerCount.map((item) => `${item.employee_name} - 57`).join('\n')}`

    return await bot.sendMessage(chatId, message)
  }

  if (data === '19') {
    const admin = await botRepository.getAdminByID({ user_tg_id: id })
    const getPopularServices = await botRepository.getPopularServices(admin[0].salon_id)

    if (!getPopularServices.serviceCount.length) {
      return await bot.sendMessage(chatId, '–ü–æ—Å–ª—É–≥–∏ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    }
    //${item.total_usages}
    const message = `–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –ø–æ—Å–ª—É–≥–∏:\n${getPopularServices.serviceCount.map((item) => `${item.service_name} - 125 —Ä–∞–∑—ñ–≤`).join('\n')}`

    return await bot.sendMessage(chatId, message)
  }
}
